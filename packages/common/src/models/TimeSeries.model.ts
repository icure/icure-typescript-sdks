/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TimeSeries as TimeSeriesDto } from '@icure/api'
import { mapTo } from '../utils/decorators'

/**
 * A high frequency time-series containing the ts in ms from the start (double) and the values
 */
@mapTo(TimeSeriesDto)
export class TimeSeries {
    fields: string[] = []
    samples: Array<number>[] = []
    min: number[] = []
    max: number[] = []
    mean: number[] = []
    median: number[] = []
    variance: number[] = []

    toJSON(): ITimeSeries {
        return {
        fields: this.fields.map(item => item),
        samples: this.samples.map(item => item.map(item => item)),
        min: this.min.map(item => item),
        max: this.max.map(item => item),
        mean: this.mean.map(item => item),
        median: this.median.map(item => item),
        variance: this.variance.map(item => item),
        }
    }

    constructor(json: Partial<ITimeSeries>) {
        if (json["fields"] !== undefined) {
            this.fields = json["fields"]!.map((item: any) => item)
        }
        if (json["samples"] !== undefined) {
            this.samples = json["samples"]!.map((item: any) => item.map((item: any) => item))
        }
        if (json["min"] !== undefined) {
            this.min = json["min"]!.map((item: any) => item)
        }
        if (json["max"] !== undefined) {
            this.max = json["max"]!.map((item: any) => item)
        }
        if (json["mean"] !== undefined) {
            this.mean = json["mean"]!.map((item: any) => item)
        }
        if (json["median"] !== undefined) {
            this.median = json["median"]!.map((item: any) => item)
        }
        if (json["variance"] !== undefined) {
            this.variance = json["variance"]!.map((item: any) => item)
        }
    }
}

export interface ITimeSeries {
    fields: string[]
    samples: Array<Array<number>>
    min: number[]
    max: number[]
    mean: number[]
    median: number[]
    variance: number[]
}
