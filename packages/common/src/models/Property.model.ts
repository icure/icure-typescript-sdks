/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { PropertyType } from "./PropertyType.model";
import { TypedValueObject } from "./TypedValueObject.model";

/**
 * Extra properties for the user. Those properties are typed (see class Property)
 */
export class Property {
  constructor(json: IProperty) {
    const { type, typedValue, ...simpleProperties } = json;
    Object.assign(this as Property, simpleProperties as IProperty);
    this.type = type && new PropertyType(type);
    this.typedValue = typedValue && new TypedValueObject(typedValue);
  }

  "id"?: string;
  "type"?: PropertyType;
  "typedValue"?: TypedValueObject;
  "deleted"?: number;

    static toJSON(instance: Property): any {
        const pojo: any = {}
        pojo["id"] = instance.id
        pojo["type"] = !!instance.type ? PropertyType.toJSON(instance.type) : undefined
        pojo["typedValue"] = !!instance.typedValue ? TypedValueObject.toJSON(instance.typedValue) : undefined
        pojo["deleted"] = instance.deleted
        return pojo
    }

    static fromJSON(pojo: any): Property {
        return new Property({id: pojo["id"], type: !!pojo["type"] ? PropertyType.fromJSON(pojo["type"]) : undefined, typedValue: !!pojo["typedValue"] ? TypedValueObject.fromJSON(pojo["typedValue"]) : undefined, deleted: pojo["deleted"]})
    }
}

interface IProperty {
  id?: string;
  type?: PropertyType;
  typedValue?: TypedValueObject;
  deleted?: number;
}
