/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Code } from '@icure/api'
import { EntityId } from '../types'
import { mapTo } from '../utils/decorators'
import { forceUuid } from '../utils/uuidUtils'

@mapTo(Code)
export class Coding {
    /**
     * the Id of the coding. We encourage using either a v4 UUID or a HL7 Id.
     */
    id: EntityId
    /**
     * the revision of the coding in the database, used for conflict management / optimistic locking.
     */
    rev?: string
    type?: string
    code?: string
    /**
     * Must be lexicographically searchable
     */
    version?: string
    regions: string[] = []
    /**
     * Description (ex: {en: Rheumatic Aortic Stenosis, fr: Sténose rhumatoïde de l'Aorte})
     */
    description?: Record<string, string>
    /**
     * Links towards related codes
     */
    qualifiedLinks: Record<string, Array<string>> = {}
    /**
     * Extra search terms/ language
     */
    searchTerms: Record<string, Array<string>> = {}

    toJSON(): ICoding {
        return {
            id: this.id,
            rev: this.rev,
            type: this.type,
            code: this.code,
            version: this.version,
            regions: this.regions.map((item) => item),
            description: this.description ? { ...this.description } : undefined,
            qualifiedLinks: { ...this.qualifiedLinks },
            searchTerms: { ...this.searchTerms },
        }
    }

    constructor(json: Partial<ICoding>) {
        this.id = forceUuid(json['id']!)
        if (json['rev'] !== undefined) {
            this.rev = json['rev']!
        }
        if (json['type'] !== undefined) {
            this.type = json['type']!
        }
        if (json['code'] !== undefined) {
            this.code = json['code']!
        }
        if (json['version'] !== undefined) {
            this.version = json['version']!
        }
        if (json['regions'] !== undefined) {
            this.regions = json['regions']!.map((item: any) => item)
        }
        if (json['description'] !== undefined) {
            this.description = { ...json['description']! }
        }
        if (json['qualifiedLinks'] !== undefined) {
            this.qualifiedLinks = { ...json['qualifiedLinks']! }
        }
        if (json['searchTerms'] !== undefined) {
            this.searchTerms = { ...json['searchTerms']! }
        }
    }
}

export interface ICoding {
    id: EntityId
    rev?: string
    type?: string
    code?: string
    version?: string
    regions: string[]
    description?: Record<string, string>
    qualifiedLinks: Record<string, Array<string>>
    searchTerms: Record<string, Array<string>>
}
