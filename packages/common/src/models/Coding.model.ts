/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Code } from '@icure/api'
import { mapTo } from '../utils/decorators'

@mapTo(Code)
export class Coding {
    constructor(json: ICoding) {
        this.id = json.id ?? `${json.type}|${json.code}|${json.version}`
        this.rev = json.rev
        this.type = json.type
        this.code = json.code
        this.version = json.version
        this.regions = json.regions ?? []
        this.description = json.description
        this.qualifiedLinks = json.qualifiedLinks ?? {}
        this.searchTerms = json.searchTerms ?? {}
    }

    /**
     * the Id of the coding. We encourage using either a v4 UUID or a HL7 Id.
     */
    'id': string
    /**
     * the revision of the coding in the database, used for conflict management / optimistic locking.
     */
    'rev'?: string
    'type'?: string
    'code'?: string
    /**
     * Must be lexicographically searchable
     */
    'version'?: string
    'regions': Array<string>
    /**
     * Description (ex: {en: Rheumatic Aortic Stenosis, fr: Sténose rhumatoïde de l'Aorte})
     */
    'description'?: Record<string, string>
    /**
     * Links towards related codes
     */
    'qualifiedLinks': Record<string, Array<string>>
    /**
     * Extra search terms/ language
     */
    'searchTerms': Record<string, Array<string>>

    static toJSON(instance: Coding): any {
        const pojo: any = {}
        pojo['id'] = instance.id
        if (instance.rev !== undefined) pojo['rev'] = instance.rev
        if (instance.type !== undefined) pojo['type'] = instance.type
        if (instance.code !== undefined) pojo['code'] = instance.code
        if (instance.version !== undefined) pojo['version'] = instance.version
        pojo['regions'] = ([...instance.regions].map((item) => item))
        if (instance.description !== undefined) pojo['description'] = !!instance.description ? Object.fromEntries(Object.entries(instance.description).map(([k, v]) => [k, v])) : undefined
        pojo['qualifiedLinks'] = Object.fromEntries(Object.entries(instance.qualifiedLinks).map(([k, v]) => [k, v.map((item) => item)]))
        pojo['searchTerms'] = Object.fromEntries(Object.entries(instance.searchTerms).map(([k, v]) => [k, ([...v].map((item) => item))]))
        return pojo
    }

    static fromJSON(pojo: any): Coding {
        const obj = {} as ICoding
        obj['id'] = pojo['id']
        if (pojo['rev'] !== undefined) {
            obj['rev'] = pojo['rev']
        }
        if (pojo['type'] !== undefined) {
            obj['type'] = pojo['type']
        }
        if (pojo['code'] !== undefined) {
            obj['code'] = pojo['code']
        }
        if (pojo['version'] !== undefined) {
            obj['version'] = pojo['version']
        }
        obj['regions'] = (pojo['regions'].map((item: any) => item))
        if (pojo['description'] !== undefined) {
            obj['description'] = pojo['description'] ? Object.fromEntries(Object.entries(pojo['description']).map(([k, v]: [any, any]) => [k, v])) : undefined
        }
        obj['qualifiedLinks'] = Object.fromEntries(Object.entries(pojo['qualifiedLinks']).map(([k, v]: [any, any]) => [k, v.map((item: any) => item)]))
        obj['searchTerms'] = Object.fromEntries(Object.entries(pojo['searchTerms']).map(([k, v]: [any, any]) => [k, (v.map((item: any) => item))]))
        return new Coding(obj)
    }
}

interface ICoding {
    id?: string
    rev?: string
    type?: string
    code?: string
    version?: string
    regions?: Array<string>
    description?: Record<string, string>
    qualifiedLinks?: Record<string, Array<string>>
    searchTerms?: Record<string, Array<string>>
}
