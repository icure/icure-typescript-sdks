/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Document as DocumentDto } from "@icure/api";
import { mapTo } from "../utils/decorators";

@mapTo(DocumentDto)
export class Document {
constructor(json: IDocument) {
  const { otherUtis, ...simpleProperties } = json

  Object.assign(this as Document, simpleProperties as IDocument)

  this.otherUtis = otherUtis ? new Set([...otherUtis]) : new Set()
}

    /**
    * The Id of the document. We encourage using either a v4 UUID or a HL7 Id.
    */
    'id'?: string;
    /**
    * The revision of the document in the database, used for conflict management / optimistic locking.
    */
    'rev'?: string;
    'created'?: number;
    'modified'?: number;
    'author'?: string;
    'responsible'?: string;
    'medicalLocationId'?: string;
    'deletionDate'?: number;
    /**
    * Reference in object store
    */
    'objectStoreReference'?: string;
    /**
    * The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE)
    */
    'mainUti'?: string;
    /**
    * Name of the document
    */
    'name'?: string;
    /**
    * The document version
    */
    'version'?: string;
    /**
    * Extra Uniform Type Identifiers
    */
    'otherUtis': Set<string>;
    /**
    * A unique external id (from another external source).
    */
    'externalUuid'?: string;
    /**
    * Size of the document file
    */
    'size'?: number;
    /**
    * Hashed version of the document
    */
    'hash'?: string;
    /**
    * Id of attachment to this document
    */
    'attachmentId'?: string;

    static toJSON(instance: Document): any {
        const pojo: any = {}
        pojo["id"] = instance.id
        pojo["rev"] = instance.rev
        pojo["created"] = instance.created
        pojo["modified"] = instance.modified
        pojo["author"] = instance.author
        pojo["responsible"] = instance.responsible
        pojo["medicalLocationId"] = instance.medicalLocationId
        pojo["deletionDate"] = instance.deletionDate
        pojo["objectStoreReference"] = instance.objectStoreReference
        pojo["mainUti"] = instance.mainUti
        pojo["name"] = instance.name
        pojo["version"] = instance.version
        pojo["otherUtis"] = Array.from([...instance.otherUtis].map(item => item))
        pojo["externalUuid"] = instance.externalUuid
        pojo["size"] = instance.size
        pojo["hash"] = instance.hash
        pojo["attachmentId"] = instance.attachmentId
        return pojo
    }

    static fromJSON(pojo: any): Document {
        return new Document({id: pojo["id"], rev: pojo["rev"], created: pojo["created"], modified: pojo["modified"], author: pojo["author"], responsible: pojo["responsible"], medicalLocationId: pojo["medicalLocationId"], deletionDate: pojo["deletionDate"], objectStoreReference: pojo["objectStoreReference"], mainUti: pojo["mainUti"], name: pojo["name"], version: pojo["version"], otherUtis: new Set(pojo["otherUtis"].map((item: any) => item)), externalUuid: pojo["externalUuid"], size: pojo["size"], hash: pojo["hash"], attachmentId: pojo["attachmentId"]})
    }
}

interface IDocument {
  'id'?: string;
  'rev'?: string;
  'created'?: number;
  'modified'?: number;
  'author'?: string;
  'responsible'?: string;
  'medicalLocationId'?: string;
  'deletionDate'?: number;
  'objectStoreReference'?: string;
  'mainUti'?: string;
  'name'?: string;
  'version'?: string;
  'otherUtis'?: Set<string>;
  'externalUuid'?: string;
  'size'?: number;
  'hash'?: string;
  'attachmentId'?: string;
}
