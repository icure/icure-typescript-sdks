/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Delegation } from "./Delegation.model";

export class SystemMetaDataOwnerEncrypted {
  constructor(json: ISystemMetaDataOwnerEncrypted) {
    Object.assign(this as SystemMetaDataOwnerEncrypted, json);
  }

  "publicKey": string;
  "hcPartyKeys": Map<string, Array<string>>;
  "privateKeyShamirPartitions": Map<string, string>;
  "secretForeignKeys": Array<string>;
  "cryptedForeignKeys": Map<string, Set<Delegation>>;
  "delegations": Map<string, Set<Delegation>>;
  "encryptionKeys": Map<string, Set<Delegation>>;
  "aesExchangeKeys": Map<string, Map<string, Map<string, string>>>;
  "transferKeys": Map<string, Map<string, string>>;
  "encryptedSelf"?: string;

    static toJSON(instance: SystemMetaDataOwnerEncrypted): any {
        const pojo: any = {}
        pojo["publicKey"] = instance.publicKey
        pojo["hcPartyKeys"] = Object.fromEntries([...instance.hcPartyKeys.entries()].map(([k, v]) => [k, v.map(item => item)]))
        pojo["privateKeyShamirPartitions"] = Object.fromEntries([...instance.privateKeyShamirPartitions.entries()].map(([k, v]) => [k, v]))
        pojo["secretForeignKeys"] = instance.secretForeignKeys.map(item => item)
        pojo["cryptedForeignKeys"] = Object.fromEntries([...instance.cryptedForeignKeys.entries()].map(([k, v]) => [k, Array.from([...v].map(item => Delegation.toJSON(item)))]))
        pojo["delegations"] = Object.fromEntries([...instance.delegations.entries()].map(([k, v]) => [k, Array.from([...v].map(item => Delegation.toJSON(item)))]))
        pojo["encryptionKeys"] = Object.fromEntries([...instance.encryptionKeys.entries()].map(([k, v]) => [k, Array.from([...v].map(item => Delegation.toJSON(item)))]))
        pojo["aesExchangeKeys"] = Object.fromEntries([...instance.aesExchangeKeys.entries()].map(([k, v]) => [k, Object.fromEntries([...v.entries()].map(([k, v]) => [k, Object.fromEntries([...v.entries()].map(([k, v]) => [k, v]))]))]))
        pojo["transferKeys"] = Object.fromEntries([...instance.transferKeys.entries()].map(([k, v]) => [k, Object.fromEntries([...v.entries()].map(([k, v]) => [k, v]))]))
        pojo["encryptedSelf"] = instance.encryptedSelf
        return pojo
    }

    static fromJSON(pojo: any): SystemMetaDataOwnerEncrypted {
        return new SystemMetaDataOwnerEncrypted({publicKey: pojo["publicKey"], hcPartyKeys: new Map(Object.entries(pojo["hcPartyKeys"]).map(([k, v]: [any, any]) => [k, v.map((item: any) => item)])), privateKeyShamirPartitions: new Map(Object.entries(pojo["privateKeyShamirPartitions"]).map(([k, v]: [any, any]) => [k, v])), secretForeignKeys: pojo["secretForeignKeys"].map((item: any) => item), cryptedForeignKeys: new Map(Object.entries(pojo["cryptedForeignKeys"]).map(([k, v]: [any, any]) => [k, new Set(v.map((item: any) => Delegation.fromJSON(item)))])), delegations: new Map(Object.entries(pojo["delegations"]).map(([k, v]: [any, any]) => [k, new Set(v.map((item: any) => Delegation.fromJSON(item)))])), encryptionKeys: new Map(Object.entries(pojo["encryptionKeys"]).map(([k, v]: [any, any]) => [k, new Set(v.map((item: any) => Delegation.fromJSON(item)))])), aesExchangeKeys: new Map(Object.entries(pojo["aesExchangeKeys"]).map(([k, v]: [any, any]) => [k, new Map(Object.entries(v).map(([k, v]: [any, any]) => [k, new Map(Object.entries(v).map(([k, v]: [any, any]) => [k, v]))]))])), transferKeys: new Map(Object.entries(pojo["transferKeys"]).map(([k, v]: [any, any]) => [k, new Map(Object.entries(v).map(([k, v]: [any, any]) => [k, v]))])), encryptedSelf: pojo["encryptedSelf"]})
    }
}

interface ISystemMetaDataOwnerEncrypted {
  publicKey?: string;
  hcPartyKeys?: Map<string, Array<string>>;
  privateKeyShamirPartitions?: Map<string, string>;
  secretForeignKeys?: Array<string>;
  cryptedForeignKeys?: Map<string, Set<Delegation>>;
  delegations?: Map<string, Set<Delegation>>;
  encryptionKeys?: Map<string, Set<Delegation>>;
  aesExchangeKeys?: Map<string, Map<string, Map<string, string>>>;
  transferKeys?: Map<string, Map<string, string>>;
  encryptedSelf?: string;
}
