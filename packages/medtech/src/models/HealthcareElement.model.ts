/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Annotation, CodingReference, EntityId, forceUuid, HealthElementDto, IAnnotation, ICodingReference, Identifier, IIdentifier, ISystemMetaDataEncrypted, mapTo, SystemMetaDataEncrypted } from '@icure/typescript-common'

@mapTo(HealthElementDto)
export class HealthcareElement {
    /**
     * The Id of the healthcare element. We encourage using either a v4 UUID or a HL7 Id.
     */
    id: EntityId
    identifiers: Identifier[] = []
    /**
     * The revision of the healthcare element in the database, used for conflict management / optimistic locking.
     */
    rev?: string
    created?: number
    modified?: number
    author?: string
    responsible?: string
    medicalLocationId?: string
    labels: CodingReference[] = []
    codes: CodingReference[] = []
    endOfLife?: number
    deletionDate?: number
    /**
     * The logical id of the healthcare element, used to link together different versions of the same healthcare element. We encourage using either a v4 UUID or a HL7 Id.
     */
    healthcareElementId?: string
    /**
     * The date (unix epoch in ms) when the healthcare element is noted to have started and also closes on the same date
     */
    valueDate?: number
    /**
     * The date (unix epoch in ms) of the start of the healthcare element.
     */
    openingDate?: number
    /**
     * The date (unix epoch in ms) marking the end of the healthcare element.
     */
    closingDate?: number
    /**
     * Description of the healthcare element.
     */
    description?: string
    /**
     * A text note (can be confidential, encrypted by default).
     */
    note?: string
    notes: Annotation[] = []
    systemMetaData?: SystemMetaDataEncrypted

    toJSON(): IHealthcareElement {
        return {
            id: this.id,
            identifiers: this.identifiers.map((item) => item.toJSON()),
            rev: this.rev,
            created: this.created,
            modified: this.modified,
            author: this.author,
            responsible: this.responsible,
            medicalLocationId: this.medicalLocationId,
            labels: this.labels.map((item) => item.toJSON()),
            codes: this.codes.map((item) => item.toJSON()),
            endOfLife: this.endOfLife,
            deletionDate: this.deletionDate,
            healthcareElementId: this.healthcareElementId,
            valueDate: this.valueDate,
            openingDate: this.openingDate,
            closingDate: this.closingDate,
            description: this.description,
            note: this.note,
            notes: this.notes.map((item) => item.toJSON()),
            systemMetaData: !!this.systemMetaData ? this.systemMetaData.toJSON() : undefined,
        }
    }

    constructor(json: Partial<IHealthcareElement>) {
        this.id = forceUuid(json['id']!)
        if (json['identifiers'] !== undefined) {
            this.identifiers = json['identifiers']!.map((item: any) => new Identifier(item))
        }
        if (json['rev'] !== undefined) {
            this.rev = json['rev']!
        }
        if (json['created'] !== undefined) {
            this.created = json['created']!
        }
        if (json['modified'] !== undefined) {
            this.modified = json['modified']!
        }
        if (json['author'] !== undefined) {
            this.author = json['author']!
        }
        if (json['responsible'] !== undefined) {
            this.responsible = json['responsible']!
        }
        if (json['medicalLocationId'] !== undefined) {
            this.medicalLocationId = json['medicalLocationId']!
        }
        if (json['labels'] !== undefined) {
            this.labels = json['labels']!.map((item: any) => new CodingReference(item))
        }
        if (json['codes'] !== undefined) {
            this.codes = json['codes']!.map((item: any) => new CodingReference(item))
        }
        if (json['endOfLife'] !== undefined) {
            this.endOfLife = json['endOfLife']!
        }
        if (json['deletionDate'] !== undefined) {
            this.deletionDate = json['deletionDate']!
        }
        if (json['healthcareElementId'] !== undefined) {
            this.healthcareElementId = json['healthcareElementId']!
        }
        if (json['valueDate'] !== undefined) {
            this.valueDate = json['valueDate']!
        }
        if (json['openingDate'] !== undefined) {
            this.openingDate = json['openingDate']!
        }
        if (json['closingDate'] !== undefined) {
            this.closingDate = json['closingDate']!
        }
        if (json['description'] !== undefined) {
            this.description = json['description']!
        }
        if (json['note'] !== undefined) {
            this.note = json['note']!
        }
        if (json['notes'] !== undefined) {
            this.notes = json['notes']!.map((item: any) => new Annotation(item))
        }
        if (json['systemMetaData'] !== undefined) {
            this.systemMetaData = new SystemMetaDataEncrypted(json['systemMetaData']!)
        }
    }
}

export interface IHealthcareElement {
    id?: EntityId
    identifiers: IIdentifier[]
    rev?: string
    created?: number
    modified?: number
    author?: string
    responsible?: string
    medicalLocationId?: string
    labels: ICodingReference[]
    codes: ICodingReference[]
    endOfLife?: number
    deletionDate?: number
    healthcareElementId?: string
    valueDate?: number
    openingDate?: number
    closingDate?: number
    description?: string
    note?: string
    notes: IAnnotation[]
    systemMetaData?: ISystemMetaDataEncrypted
}
