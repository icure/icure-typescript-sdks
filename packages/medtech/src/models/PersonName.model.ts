/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapTo, PersonNameDto } from '@icure/typescript-common'

/**
 * the list of all names of the patient, also containing the official full name information. Ordered by preference of use. First element is therefore the official name used for the patient in the application
 */
@mapTo(PersonNameDto)
export class PersonName {
    constructor(json: Partial<IPersonName>) {
        Object.assign(this as PersonName, json as IPersonName)
    }

    'lastName'?: string
    'firstNames': Array<string>
    'start'?: number
    'end'?: number
    'prefix': Array<string>
    'suffix': Array<string>
    'text'?: string
    'use'?: PersonNameUseEnum

    static toJSON(instance: PersonName): IPersonName {
        const pojo: IPersonName = {} as IPersonName
        if (instance.lastName !== undefined) pojo['lastName'] = instance.lastName
        pojo['firstNames'] = instance.firstNames.map((item) => item)
        if (instance.start !== undefined) pojo['start'] = instance.start
        if (instance.end !== undefined) pojo['end'] = instance.end
        pojo['prefix'] = instance.prefix.map((item) => item)
        pojo['suffix'] = instance.suffix.map((item) => item)
        if (instance.text !== undefined) pojo['text'] = instance.text
        if (instance.use !== undefined) pojo['use'] = instance.use
        return pojo
    }

    static fromJSON(pojo: IPersonName): PersonName {
        const obj = {} as IPersonName
        if (pojo['lastName'] !== undefined) {
            obj['lastName'] = pojo['lastName']!
        }
        obj['firstNames'] = pojo['firstNames'].map((item: any) => item)
        if (pojo['start'] !== undefined) {
            obj['start'] = pojo['start']!
        }
        if (pojo['end'] !== undefined) {
            obj['end'] = pojo['end']!
        }
        obj['prefix'] = pojo['prefix'].map((item: any) => item)
        obj['suffix'] = pojo['suffix'].map((item: any) => item)
        if (pojo['text'] !== undefined) {
            obj['text'] = pojo['text']!
        }
        if (pojo['use'] !== undefined) {
            obj['use'] = pojo['use']!
        }
        return new PersonName(obj)
    }
}

export interface IPersonName {
    lastName?: string
    firstNames: Array<string>
    start?: number
    end?: number
    prefix: Array<string>
    suffix: Array<string>
    text?: string
    use?: PersonNameUseEnum
}

export type PersonNameUseEnum = 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'maiden' | 'old' | 'other'
