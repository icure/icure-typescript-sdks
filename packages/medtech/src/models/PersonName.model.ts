/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapTo, PersonNameDto } from '@icure/typescript-common'

/**
 * the list of all names of the patient, also containing the official full name information. Ordered by preference of use. First element is therefore the official name used for the patient in the application
 */
@mapTo(PersonNameDto)
export class PersonName {
    lastName?: string
    firstNames: string[] = []
    start?: number
    end?: number
    prefix: string[] = []
    suffix: string[] = []
    text?: string
    use?: PersonNameUseEnum

    toJSON(): IPersonName {
        return {
        lastName: this.lastName,
        firstNames: this.firstNames.map(item => item),
        start: this.start,
        end: this.end,
        prefix: this.prefix.map(item => item),
        suffix: this.suffix.map(item => item),
        text: this.text,
        use: this.use,
        }
    }

    constructor(json: Partial<IPersonName> ) {
        if (json["lastName"] !== undefined) {
            this.lastName = json["lastName"]!
        }
        if (json["firstNames"] !== undefined) {
            this.firstNames = json["firstNames"]!.map((item: any) => item)
        }
        if (json["start"] !== undefined) {
            this.start = json["start"]!
        }
        if (json["end"] !== undefined) {
            this.end = json["end"]!
        }
        if (json["prefix"] !== undefined) {
            this.prefix = json["prefix"]!.map((item: any) => item)
        }
        if (json["suffix"] !== undefined) {
            this.suffix = json["suffix"]!.map((item: any) => item)
        }
        if (json["text"] !== undefined) {
            this.text = json["text"]!
        }
        if (json["use"] !== undefined) {
            this.use = json["use"]!
        }
    }
}

export interface IPersonName {
    lastName?: string
    firstNames: string[]
    start?: number
    end?: number
    prefix: string[]
    suffix: string[]
    text?: string
    use?: PersonNameUseEnum
}

export type PersonNameUseEnum = 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'maiden' | 'old' | 'other'
