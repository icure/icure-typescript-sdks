/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { b64_2ab, Patient as PatientDto, ua2b64 } from '@icure/api'
import { Annotation, CodingReference, Identifier, mapTo, Property, SystemMetaDataOwnerEncrypted } from '@icure/typescript-common'
import { Address } from './Address.model'
import { HealthcareProfessionalGenderEnum } from './HealthcareProfessional.model'
import { Partnership } from './Partnership.model'
import { PatientHealthCareParty } from './PatientHealthCareParty.model'
import { PersonName } from './PersonName.model'

@mapTo(PatientDto)
export class Patient {
  'id'?: string
  'rev'?: string
  'identifiers': Identifier[]
  'created'?: number
  'modified'?: number
  'author'?: string
  'responsible'?: string
  'labels': Set<CodingReference>
  'codes': Set<CodingReference>
  'endOfLife'?: number
  'deletionDate'?: number
  'firstName'?: string
  'lastName'?: string
  'names': PersonName[]
  'companyName'?: string
  'languages': string[]
  'addresses': Address[]
  'civility'?: string
  'gender'?: PatientGenderEnum
  'birthSex'?: PatientBirthSexEnum
  'mergeToPatientId'?: string
  'mergedIds': Set<string>
  'alias'?: string
  'active': boolean
  deactivationDate?: number
  'deactivationReason': PatientDeactivationReasonEnum
  'ssin'?: string
  'maidenName'?: string
  'spouseName'?: string
  'partnerName'?: string
  'personalStatus'?: PatientPersonalStatusEnum
  'dateOfBirth'?: number
  'dateOfDeath'?: number
  'placeOfBirth'?: string
  'placeOfDeath'?: string
  'deceased'?: boolean
  'education'?: string
  'profession'?: string
  'note'?: string
  notes?: Annotation[]
  'administrativeNote'?: string
  'nationality'?: string
  'race'?: string
  'ethnicity'?: string
  'picture'?: ArrayBuffer
  'externalId'?: string
  'partnerships': Partnership[]
  'patientHealthCareParties': PatientHealthCareParty[]
  'patientProfessions': CodingReference[]
  'parameters': Map<string, string[]>
  'properties': Set<Property>
  'systemMetaData'?: SystemMetaDataOwnerEncrypted

  constructor(json: IPatient) {
    const {
      identifiers,
      labels,
      codes,
      names,
      addresses,
      gender,
      birthSex,
      mergedIds,
      deactivationReason,
      personalStatus,
      picture,
      partnerships,
      patientHealthCareParties,
      patientProfessions,
      properties,
      systemMetaData,
      ...simpleProperties
    } = json

    Object.assign(this as Patient, simpleProperties as IPatient)

    this.identifiers = identifiers ? [...identifiers]?.map((p) => new Identifier(p)) : []

    this.labels = labels ? new Set([...labels].map((it) => new CodingReference(it))) : new Set()
    this.codes = codes ? new Set([...codes].map((it) => new CodingReference(it))) : new Set()

    this.names = names?.map((n) => new PersonName(n)) ?? []
    this.addresses = addresses?.map((a) => new Address(a)) ?? []
    this.gender = gender as HealthcareProfessionalGenderEnum
    this.birthSex = birthSex as HealthcareProfessionalGenderEnum
    this.mergedIds = mergedIds ? new Set([...mergedIds]) : new Set()
    this.deactivationReason = deactivationReason as PatientDeactivationReasonEnum
    this.personalStatus = personalStatus as PatientPersonalStatusEnum

    this.picture = !picture
      ? undefined
      : (picture as unknown) instanceof ArrayBuffer
      ? picture
      : typeof (picture as unknown) === 'string'
      ? b64_2ab(picture as unknown as string)
      : undefined

    this.partnerships = partnerships ? [...partnerships]?.map((p) => new Partnership(p)) : []
    this.patientHealthCareParties = patientHealthCareParties ? [...patientHealthCareParties]?.map((p) => new PatientHealthCareParty(p)) : []
    this.patientProfessions = patientProfessions ? [...patientProfessions]?.map((p) => new CodingReference(p)) : []

    this.properties = properties ? new Set([...properties]?.map((p) => new Property(p))) : new Set()

    this.systemMetaData = systemMetaData && new SystemMetaDataOwnerEncrypted(systemMetaData)
  }

  static toJSON(instance: Patient): any {
    const pojo: any = {}
    pojo['id'] = instance.id
    pojo['rev'] = instance.rev
    pojo['identifiers'] = instance.identifiers.map((item) => Identifier.toJSON(item))
    pojo['created'] = instance.created
    pojo['modified'] = instance.modified
    pojo['author'] = instance.author
    pojo['responsible'] = instance.responsible
    pojo['labels'] = Array.from([...instance.labels].map((item) => CodingReference.toJSON(item)))
    pojo['codes'] = Array.from([...instance.codes].map((item) => CodingReference.toJSON(item)))
    pojo['endOfLife'] = instance.endOfLife
    pojo['deletionDate'] = instance.deletionDate
    pojo['firstName'] = instance.firstName
    pojo['lastName'] = instance.lastName
    pojo['names'] = instance.names.map((item) => PersonName.toJSON(item))
    pojo['companyName'] = instance.companyName
    pojo['languages'] = instance.languages.map((item) => item)
    pojo['addresses'] = instance.addresses.map((item) => Address.toJSON(item))
    pojo['civility'] = instance.civility
    pojo['gender'] = instance.gender
    pojo['birthSex'] = instance.birthSex
    pojo['mergeToPatientId'] = instance.mergeToPatientId
    pojo['mergedIds'] = Array.from([...instance.mergedIds].map((item) => item))
    pojo['alias'] = instance.alias
    pojo['active'] = instance.active
    pojo['deactivationDate'] = instance.deactivationDate
    pojo['deactivationReason'] = instance.deactivationReason
    pojo['ssin'] = instance.ssin
    pojo['maidenName'] = instance.maidenName
    pojo['spouseName'] = instance.spouseName
    pojo['partnerName'] = instance.partnerName
    pojo['personalStatus'] = instance.personalStatus
    pojo['dateOfBirth'] = instance.dateOfBirth
    pojo['dateOfDeath'] = instance.dateOfDeath
    pojo['placeOfBirth'] = instance.placeOfBirth
    pojo['placeOfDeath'] = instance.placeOfDeath
    pojo['deceased'] = instance.deceased
    pojo['education'] = instance.education
    pojo['profession'] = instance.profession
    pojo['note'] = instance.note
    pojo['notes'] = instance.notes?.map((item) => Annotation.toJSON(item))
    pojo['administrativeNote'] = instance.administrativeNote
    pojo['nationality'] = instance.nationality
    pojo['race'] = instance.race
    pojo['ethnicity'] = instance.ethnicity
    pojo['picture'] = !!instance.picture ? ua2b64(instance.picture) : undefined
    pojo['externalId'] = instance.externalId
    pojo['partnerships'] = instance.partnerships.map((item) => Partnership.toJSON(item))
    pojo['patientHealthCareParties'] = instance.patientHealthCareParties.map((item) => PatientHealthCareParty.toJSON(item))
    pojo['patientProfessions'] = instance.patientProfessions.map((item) => CodingReference.toJSON(item))
    pojo['parameters'] = Object.fromEntries([...instance.parameters.entries()].map(([k, v]) => [k, v.map((item) => item)]))
    pojo['properties'] = Array.from([...instance.properties].map((item) => Property.toJSON(item)))
    pojo['systemMetaData'] = !!instance.systemMetaData ? SystemMetaDataOwnerEncrypted.toJSON(instance.systemMetaData) : undefined
    return pojo
  }

  static fromJSON(pojo: any): Patient {
    return new Patient({
      id: pojo['id'],
      rev: pojo['rev'],
      identifiers: pojo['identifiers'].map((item: any) => Identifier.fromJSON(item)),
      created: pojo['created'],
      modified: pojo['modified'],
      author: pojo['author'],
      responsible: pojo['responsible'],
      labels: new Set(pojo['labels'].map((item: any) => CodingReference.fromJSON(item))),
      codes: new Set(pojo['codes'].map((item: any) => CodingReference.fromJSON(item))),
      endOfLife: pojo['endOfLife'],
      deletionDate: pojo['deletionDate'],
      firstName: pojo['firstName'],
      lastName: pojo['lastName'],
      names: pojo['names'].map((item: any) => PersonName.fromJSON(item)),
      companyName: pojo['companyName'],
      languages: pojo['languages'].map((item: any) => item),
      addresses: pojo['addresses'].map((item: any) => Address.fromJSON(item)),
      civility: pojo['civility'],
      gender: pojo['gender'],
      birthSex: pojo['birthSex'],
      mergeToPatientId: pojo['mergeToPatientId'],
      mergedIds: new Set(pojo['mergedIds'].map((item: any) => item)),
      alias: pojo['alias'],
      active: pojo['active'],
      deactivationDate: pojo['deactivationDate'],
      deactivationReason: pojo['deactivationReason'],
      ssin: pojo['ssin'],
      maidenName: pojo['maidenName'],
      spouseName: pojo['spouseName'],
      partnerName: pojo['partnerName'],
      personalStatus: pojo['personalStatus'],
      dateOfBirth: pojo['dateOfBirth'],
      dateOfDeath: pojo['dateOfDeath'],
      placeOfBirth: pojo['placeOfBirth'],
      placeOfDeath: pojo['placeOfDeath'],
      deceased: pojo['deceased'],
      education: pojo['education'],
      profession: pojo['profession'],
      note: pojo['note'],
      notes: pojo['notes']?.map((item: any) => Annotation.fromJSON(item)),
      administrativeNote: pojo['administrativeNote'],
      nationality: pojo['nationality'],
      race: pojo['race'],
      ethnicity: pojo['ethnicity'],
      picture: !!pojo['picture'] ? b64_2ab(pojo['picture']) : undefined,
      externalId: pojo['externalId'],
      partnerships: pojo['partnerships'].map((item: any) => Partnership.fromJSON(item)),
      patientHealthCareParties: pojo['patientHealthCareParties'].map((item: any) => PatientHealthCareParty.fromJSON(item)),
      patientProfessions: pojo['patientProfessions'].map((item: any) => CodingReference.fromJSON(item)),
      parameters: new Map(Object.entries(pojo['parameters']).map(([k, v]: [any, any]) => [k, v.map((item: any) => item)])),
      properties: new Set(pojo['properties'].map((item: any) => Property.fromJSON(item))),
      systemMetaData: !!pojo['systemMetaData'] ? SystemMetaDataOwnerEncrypted.fromJSON(pojo['systemMetaData']) : undefined,
    })
  }
}

interface IPatient {
  id?: string
  rev?: string
  identifiers?: Array<Identifier>
  created?: number
  modified?: number
  author?: string
  responsible?: string
  labels?: Set<CodingReference>
  codes?: Set<CodingReference>
  endOfLife?: number
  deletionDate?: number
  firstName?: string
  lastName?: string
  names?: Array<PersonName>
  companyName?: string
  languages?: Array<string>
  addresses?: Array<Address>
  civility?: string
  gender?: PatientGenderEnum
  birthSex?: PatientBirthSexEnum
  mergeToPatientId?: string
  mergedIds?: Set<string>
  alias?: string
  active?: boolean
  deactivationDate?: number
  deactivationReason?: PatientDeactivationReasonEnum
  ssin?: string
  maidenName?: string
  spouseName?: string
  partnerName?: string
  personalStatus?: PatientPersonalStatusEnum
  dateOfBirth?: number
  dateOfDeath?: number
  placeOfBirth?: string
  placeOfDeath?: string
  deceased?: boolean
  education?: string
  profession?: string
  note?: string
  notes?: Annotation[]
  administrativeNote?: string
  nationality?: string
  race?: string
  ethnicity?: string
  picture?: ArrayBuffer
  externalId?: string
  partnerships?: Array<Partnership>
  patientHealthCareParties?: Array<PatientHealthCareParty>
  patientProfessions?: Array<CodingReference>
  parameters?: Map<string, string[]>
  properties?: Set<Property>
  systemMetaData?: SystemMetaDataOwnerEncrypted
}

export type PatientGenderEnum = 'male' | 'female' | 'indeterminate' | 'changed' | 'changedToMale' | 'changedToFemale' | 'unknown'
export type PatientBirthSexEnum = 'male' | 'female' | 'indeterminate' | 'changed' | 'changedToMale' | 'changedToFemale' | 'unknown'
export type PatientDeactivationReasonEnum = 'deceased' | 'moved' | 'other_doctor' | 'retired' | 'no_contact' | 'unknown' | 'none'
export type PatientPersonalStatusEnum =
  | 'single'
  | 'in_couple'
  | 'married'
  | 'separated'
  | 'divorced'
  | 'divorcing'
  | 'widowed'
  | 'widower'
  | 'complicated'
  | 'unknown'
  | 'contract'
  | 'other'
  | 'annulled'
  | 'polygamous'
