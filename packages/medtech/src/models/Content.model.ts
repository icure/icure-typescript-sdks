/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ContentDto, IMeasure, ITimeSeries, Measure, TimeSeries, base64string, mapTo } from '@icure/typescript-common'
import { DataSample, IDataSample } from './DataSample.model'

/**
 * Information contained in the data sample (Measure, number, ...). Content is localized, using ISO language code as key
 */

@mapTo(ContentDto)
export class Content {
    stringValue?: string
    numberValue?: number
    booleanValue?: boolean
    instantValue?: number
    /**
     * Value as date. The format could have a all three (day, month and year) or values on any of these three, whatever is known.
     */
    fuzzyDateValue?: number
    binaryValue?: base64string
    /**
     * Linked document.
     */
    documentId?: string
    measureValue?: Measure
    timeSeries?: TimeSeries
    compoundValue?: DataSample[]
    ratio?: Measure[]
    range?: Measure[]

    toJSON(): IContent {
        return {
        stringValue: this.stringValue,
        numberValue: this.numberValue,
        booleanValue: this.booleanValue,
        instantValue: this.instantValue,
        fuzzyDateValue: this.fuzzyDateValue,
        binaryValue: this.binaryValue,
        documentId: this.documentId,
        measureValue: !!this.measureValue ? this.measureValue.toJSON() : undefined,
        timeSeries: !!this.timeSeries ? this.timeSeries.toJSON() : undefined,
        compoundValue: this.compoundValue?.map(item => item.toJSON()),
        ratio: this.ratio?.map(item => item.toJSON()),
        range: this.range?.map(item => item.toJSON()),
        }
    }

    constructor(json: Partial<IContent>) {
        if (json["stringValue"] !== undefined) {
            this.stringValue = json["stringValue"]!
        }
        if (json["numberValue"] !== undefined) {
            this.numberValue = json["numberValue"]!
        }
        if (json["booleanValue"] !== undefined) {
            this.booleanValue = json["booleanValue"]!
        }
        if (json["instantValue"] !== undefined) {
            this.instantValue = json["instantValue"]!
        }
        if (json["fuzzyDateValue"] !== undefined) {
            this.fuzzyDateValue = json["fuzzyDateValue"]!
        }
        if (json["binaryValue"] !== undefined) {
            this.binaryValue = json["binaryValue"]!
        }
        if (json["documentId"] !== undefined) {
            this.documentId = json["documentId"]!
        }
        if (json["measureValue"] !== undefined) {
            this.measureValue = new Measure(json["measureValue"]!)
        }
        if (json["timeSeries"] !== undefined) {
            this.timeSeries = new TimeSeries(json["timeSeries"]!)
        }
        if (json["compoundValue"] !== undefined) {
            this.compoundValue = json["compoundValue"]!.map((item: any) => new DataSample(item))
        }
        if (json["ratio"] !== undefined) {
            this.ratio = json["ratio"]!.map((item: any) => new Measure(item))
        }
        if (json["range"] !== undefined) {
            this.range = json["range"]!.map((item: any) => new Measure(item))
        }
    }
}

export interface IContent {
    stringValue?: string
    numberValue?: number
    booleanValue?: boolean
    instantValue?: number
    fuzzyDateValue?: number
    binaryValue?: base64string
    documentId?: string
    measureValue?: IMeasure
    timeSeries?: ITimeSeries
    compoundValue?: IDataSample[]
    ratio?: IMeasure[]
    range?: IMeasure[]
}
