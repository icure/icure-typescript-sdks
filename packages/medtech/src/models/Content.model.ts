/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Content as ContentDto, b64_2ab, ua2b64 } from '@icure/api'
import { Measure, TimeSeries, mapTo } from '@icure/typescript-common'
import { DataSample } from './DataSample.model'

/**
 * Information contained in the data sample (Measure, number, ...). Content is localized, using ISO language code as key
 */

@mapTo(ContentDto)
export class Content {
  constructor(json: IContent) {
    Object.assign(this as Content, json)
  }

  'stringValue'?: string
  'numberValue'?: number
  'booleanValue'?: boolean
  'instantValue'?: number
  /**
   * Value as date. The format could have a all three (day, month and year) or values on any of these three, whatever is known.
   */
  'fuzzyDateValue'?: number
  'binaryValue'?: ArrayBuffer
  /**
   * Linked document.
   */
  'documentId'?: string
  'measureValue'?: Measure
  'timeSeries'?: TimeSeries
  'compoundValue'?: Array<DataSample>
  'ratio'?: Array<Measure>
  'range'?: Array<Measure>

  static toJSON(instance: Content): any {
    const pojo: any = {}
    pojo['stringValue'] = instance.stringValue
    pojo['numberValue'] = instance.numberValue
    pojo['booleanValue'] = instance.booleanValue
    pojo['instantValue'] = instance.instantValue
    pojo['fuzzyDateValue'] = instance.fuzzyDateValue
    pojo['binaryValue'] = !!instance.binaryValue ? ua2b64(instance.binaryValue) : undefined
    pojo['documentId'] = instance.documentId
    pojo['measureValue'] = !!instance.measureValue ? Measure.toJSON(instance.measureValue) : undefined
    pojo['timeSeries'] = !!instance.timeSeries ? TimeSeries.toJSON(instance.timeSeries) : undefined
    pojo['compoundValue'] = instance.compoundValue?.map((item) => DataSample.toJSON(item))
    pojo['ratio'] = instance.ratio?.map((item) => Measure.toJSON(item))
    pojo['range'] = instance.range?.map((item) => Measure.toJSON(item))
    return pojo
  }

  static fromJSON(pojo: any): Content {
    return new Content({
      stringValue: pojo['stringValue'],
      numberValue: pojo['numberValue'],
      booleanValue: pojo['booleanValue'],
      instantValue: pojo['instantValue'],
      fuzzyDateValue: pojo['fuzzyDateValue'],
      binaryValue: !!pojo['binaryValue'] ? b64_2ab(pojo['binaryValue']) : undefined,
      documentId: pojo['documentId'],
      measureValue: !!pojo['measureValue'] ? Measure.fromJSON(pojo['measureValue']) : undefined,
      timeSeries: !!pojo['timeSeries'] ? TimeSeries.fromJSON(pojo['timeSeries']) : undefined,
      compoundValue: pojo['compoundValue']?.map((item: any) => DataSample.fromJSON(item)),
      ratio: pojo['ratio']?.map((item: any) => Measure.fromJSON(item)),
      range: pojo['range']?.map((item: any) => Measure.fromJSON(item)),
    })
  }
}

interface IContent {
  stringValue?: string
  numberValue?: number
  booleanValue?: boolean
  instantValue?: number
  fuzzyDateValue?: number
  binaryValue?: ArrayBuffer
  documentId?: string
  measureValue?: Measure
  timeSeries?: TimeSeries
  compoundValue?: Array<DataSample>
  ratio?: Array<Measure>
  range?: Array<Measure>
}
