/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CodingReference,
    DeviceDto,
    EntityId,
    ICodingReference,
    IIdentifier,
    IProperty,
    Identifier,
    Property,
    SystemMetaDataOwner,
    base64string,
    forceUuid,
    mapTo
} from '@icure/typescript-common';

@mapTo(DeviceDto)
export class MedicalDevice {
    /**
     * The Id of the MedicalDevice. We encourage using either a v4 UUID or a HL7 Id.
     */
    id: EntityId
    /**
     * the revision of the medical device in the database, used for conflict management / optimistic locking.
     */
    rev?: string
    /**
     * the soft delete timestamp. When a medical device is ”deleted“, this is set to a non null value: the moment of the deletion
     */
    deletionDate?: number
    /**
     * Typically used for business / client identifiers. An identifier should identify a device uniquely and unambiguously. However, iCure cant guarantee the uniqueness of those identifiers : This is something you need to take care of.
     */
    identifiers: Identifier[] = []
    /**
     * the creation date of the medical device (encoded as epoch).
     */
    created?: number
    /**
     * the last modification date of the medical device (encoded as epoch).
     */
    modified?: number
    /**
     * The id of the [User] that created this medical device. When creating the device, this field will be filled automatically by the current user id if not provided.
     */
    author?: string
    /**
     * The id of the data owner that is responsible of this medical device. When creating the medical device, will be filled automatically by the current user data owner id ([HealthcareProfessional], [Patient] or [MedicalDevice]) if missing
     */
    responsible?: string
    /**
     * A label is an item from a codification system that qualifies a medical device as being member of a certain class, whatever the value it might have taken. If the label qualifies the content of a field, it means that whatever the content of the field, the label will always apply. LOINC is a codification system typically used for labels.
     */
    labels: CodingReference[] = []
    /**
     * A code is an item from a codification system that qualifies the content of this medical device. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
     */
    codes: CodingReference[] = []
    /**
     * Soft delete (unix epoch in ms) timestamp of the medical device
     */
    endOfLife?: number
    /**
     * An external (from another source) id with no guarantee or requirement for unicity.
     */
    externalId?: string
    /**
     * Name of the device/application recording the data
     */
    name?: string
    /**
     * Type of device/application recording the data. (eg. \"smartphone\", \"watch\",...)
     */
    type?: string
    /**
     * Brand of the device recording the data
     */
    brand?: string
    /**
     * Model of the device recording the data
     */
    model?: string
    /**
     * Serial number of the device recording the data
     */
    serialNumber?: string
    parentId?: string
    /**
     * Picture of the device/application
     */
    picture?: base64string
    properties: Property[] = []
    systemMetaData?: SystemMetaDataOwner

    toJSON(): IMedicalDevice {
        return {
        id: this.id,
        rev: this.rev,
        deletionDate: this.deletionDate,
        identifiers: this.identifiers.map(item => item.toJSON()),
        created: this.created,
        modified: this.modified,
        author: this.author,
        responsible: this.responsible,
        labels: this.labels.map(item => item.toJSON()),
        codes: this.codes.map(item => item.toJSON()),
        endOfLife: this.endOfLife,
        externalId: this.externalId,
        name: this.name,
        type: this.type,
        brand: this.brand,
        model: this.model,
        serialNumber: this.serialNumber,
        parentId: this.parentId,
        picture: this.picture,
        properties: this.properties.map(item => item.toJSON()),
        systemMetaData: !!this.systemMetaData ? this.systemMetaData.toJSON() : undefined,
        }
    }

    constructor(json: Partial<IMedicalDevice>) {
        this.id = forceUuid(json["id"]!)
        if (json["rev"] !== undefined) {
            this.rev = json["rev"]!
        }
        if (json["deletionDate"] !== undefined) {
            this.deletionDate = json["deletionDate"]!
        }
        if (json["identifiers"] !== undefined) {
            this.identifiers = json["identifiers"]!.map((item: any) => new Identifier(item))
        }
        if (json["created"] !== undefined) {
            this.created = json["created"]!
        }
        if (json["modified"] !== undefined) {
            this.modified = json["modified"]!
        }
        if (json["author"] !== undefined) {
            this.author = json["author"]!
        }
        if (json["responsible"] !== undefined) {
            this.responsible = json["responsible"]!
        }
        if (json["labels"] !== undefined) {
            this.labels = json["labels"]!.map((item: any) => new CodingReference(item))
        }
        if (json["codes"] !== undefined) {
            this.codes = json["codes"]!.map((item: any) => new CodingReference(item))
        }
        if (json["endOfLife"] !== undefined) {
            this.endOfLife = json["endOfLife"]!
        }
        if (json["externalId"] !== undefined) {
            this.externalId = json["externalId"]!
        }
        if (json["name"] !== undefined) {
            this.name = json["name"]!
        }
        if (json["type"] !== undefined) {
            this.type = json["type"]!
        }
        if (json["brand"] !== undefined) {
            this.brand = json["brand"]!
        }
        if (json["model"] !== undefined) {
            this.model = json["model"]!
        }
        if (json["serialNumber"] !== undefined) {
            this.serialNumber = json["serialNumber"]!
        }
        if (json["parentId"] !== undefined) {
            this.parentId = json["parentId"]!
        }
        if (json["picture"] !== undefined) {
            this.picture = json["picture"]!
        }
        if (json["properties"] !== undefined) {
            this.properties = json["properties"]!.map((item: any) => new Property(item))
        }
        if (json["systemMetaData"] !== undefined) {
            this.systemMetaData = new SystemMetaDataOwner(json["systemMetaData"]!)
        }
    }
}

export interface IMedicalDevice {
    id?: EntityId
    rev?: string
    deletionDate?: number
    identifiers: IIdentifier[]
    created?: number
    modified?: number
    author?: string
    responsible?: string
    labels: ICodingReference[]
    codes: ICodingReference[]
    endOfLife?: number
    externalId?: string
    name?: string
    type?: string
    brand?: string
    model?: string
    serialNumber?: string
    parentId?: string
    picture?: base64string
    properties: IProperty[]
    systemMetaData?: SystemMetaDataOwner
}
