/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Coding } from '../model/Coding';
import { Filter } from '../model/Filter';
import { PaginatedListCoding } from '../model/PaginatedListCoding';


export class MdCodingApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(host: string, headers: any, fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }


     /**
      * 
      * @summary Create a Coding
      * @param body 
      */
 createOrModifyCoding(body?: Coding): Promise<Coding> {
    let _body = null
    _body = body

    const _url = this.host + `/coding` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/xml"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              new Coding(doc.body as JSON)
              
      )
      .catch(err => this.handleError(err))
}

     /**
      * 
      * @summary Create a Coding
      * @param body 
      */
 createOrModifyCodings(body?: Array<Coding>): Promise<Array<Coding>> {
    let _body = null
    _body = body

    const _url = this.host + `/coding/batch` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/xml"))
    return XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              (doc.body as Array<JSON>).map(it => new Coding(it))
      )
      .catch(err => this.handleError(err))
}

     /**
      * 
      * @summary Delete a Coding
      * @param id 
      */
 deleteCoding(id: string): Promise<string> {
    let _body = null
    
    const _url = this.host + `/coding/${encodeURIComponent(String(id))}` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              JSON.parse(JSON.stringify(doc.body))
              
      )
      .catch(err => this.handleError(err))
}

     /**
      * 
      * @summary Find Codings using a filter
      * @param body 
      */
 filterCoding(body?: Filter): Promise<PaginatedListCoding> {
    let _body = null
    _body = body

    const _url = this.host + `/coding/filter` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/xml"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              new PaginatedListCoding(doc.body as JSON)
              
      )
      .catch(err => this.handleError(err))
}

     /**
      * 
      * @summary Get a Coding
      * @param id 
      */
 getCoding(id: string): Promise<Coding> {
    let _body = null
    
    const _url = this.host + `/coding/${encodeURIComponent(String(id))}` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              new Coding(doc.body as JSON)
              
      )
      .catch(err => this.handleError(err))
}

     /**
      * 
      * @summary Find Codings using a filter
      * @param body 
      */
 matchCoding(body?: Filter): Promise<Array<string>> {
    let _body = null
    _body = body

    const _url = this.host + `/coding/match` + "?ts=" + new Date().getTime() 
    let headers = this.headers
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.filter(h => h.header !== "Content-Type").concat(new XHR.Header("Content-Type", "application/xml"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => 
          
              (doc.body as Array<JSON>).map(it => JSON.parse(JSON.stringify(it)))
      )
      .catch(err => this.handleError(err))
}
}

